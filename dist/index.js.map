{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/DA;;;;;;;;AAAA;;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":[".././generate.js","../../../../.nvm/versions/node/v20.18.0/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/runtime/compat",".././index.js"],"sourcesContent":["let generateExtensionDescription = function ({\n    identifier,\n    name,\n    contentType,\n    area,\n    version,\n    description,\n    url,\n    downloadUrl,\n    latestUrl,\n    marketingUrl,\n    thumbnailUrl,\n    dockIconBackgroundColor,\n    dockIconForegroundColor,\n    dockIconBorderColor,\n}) {\n    let extensionDescription = {\n        identifier: identifier,\n        name: name,\n        content_type: contentType,\n        area: area,\n        version: version,\n        description: description,\n        url: url,\n        download_url: downloadUrl,\n    };\n\n    if (latestUrl) {\n        extensionDescription['latest_url'] = latestUrl;\n    }\n\n    if (marketingUrl) {\n        extensionDescription['marketing_url'] = marketingUrl;\n    }\n\n    if (thumbnailUrl) {\n        extensionDescription['thumbnail_url'] = thumbnailUrl;\n    }\n\n    if (area == 'themes') {\n        let dockIcon = {};\n\n        if (dockIconBackgroundColor) {\n            dockIcon['background_color'] = dockIconBackgroundColor;\n        }\n\n        if (dockIconForegroundColor) {\n            dockIcon['foreground_color'] = dockIconForegroundColor;\n        }\n\n        if (dockIconBorderColor) {\n            dockIcon['border_color'] = dockIconBorderColor;\n        }\n\n        if (Object.keys(dockIcon).length > 0) {\n            dockIcon['type'] = 'circle';\n            extensionDescription['dock_icon'] = dockIcon;\n        }\n    }\n\n    return extensionDescription;\n}\n\nmodule.exports = generateExtensionDescription;\n",null,"module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst io = require('@actions/io');\nconst fs = require('fs');\nconst path = require('path');\nconst generateExtensionDescription = require('./generate');\n\n\nasync function run() {\n    try {\n        // Extension description inputs\n        const identifier = core.getInput('identifier', { required: true });\n        const name = core.getInput('name', { required: true });\n        const contentType = core.getInput('content_type', { required: true });\n        const area = core.getInput('area', { required: true });\n        const version = core.getInput('version', { required: true });\n        const description = core.getInput('description', { required: true });\n        const url = core.getInput('url', { required: true });\n        const downloadUrl = core.getInput('download_url', { required: true });\n        const latestUrl = core.getInput('latest_url');\n        const marketingUrl = core.getInput('marketing_url');\n        const thumbnailUrl = core.getInput('thumbnail_url');\n        const dockIconBackgroundColor = core.getInput('dock_icon_background_color');\n        const dockIconForegroundColor = core.getInput('dock_icon_foreground_color');\n        const dockIconBorderColor = core.getInput('dock_icon_border_color');\n\n        // Ouput file inputs\n        const outputPath = core.getInput('output_path');\n\n        const extensionDescription = generateExtensionDescription({\n            identifier: identifier,\n            name: name,\n            contentType: contentType,\n            area: area,\n            version: version,\n            description: description,\n            url: url,\n            latestUrl: latestUrl,\n            downloadUrl: downloadUrl,\n            marketingUrl: marketingUrl,\n            thumbnailUrl: thumbnailUrl,\n            dockIconBackgroundColor: dockIconBackgroundColor,\n            dockIconForegroundColor: dockIconForegroundColor,\n            dockIconBorderColor: dockIconBorderColor,\n        });\n\n        const extensionDescriptionJSON = JSON.stringify(extensionDescription, null, 2);\n\n        if (outputPath !== '') {\n            const outputDirectory = path.dirname(outputPath);\n            if (!fs.existsSync(outputDirectory)) {\n                io.mkdirP(outputDirectory);\n            }\n            fs.writeFileSync(outputPath, extensionDescriptionJSON);\n        }\n\n        core.setOutput('extension_description', extensionDescriptionJSON);\n    } catch (error) {\n        console.error(error.message);\n        core.setFailed(error.message);\n    }\n}\n\nrun();\n"],"names":[],"sourceRoot":""}